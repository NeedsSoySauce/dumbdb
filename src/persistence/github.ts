import { Octokit } from 'octokit';
import { UploadOrUpdateFileParameters } from '../types/github';
import {
    CreateOrUpdateFileContentsResponseDataType,
    CreateRepositoryResponseDataType,
    GetAuthenticatedUserResponseDataType,
    GetContentResponseFileDateType,
    GetRateLimitResponseDataType,
    GetRepositoryResponseDataType,
} from '../types/octokit';

export interface GitHubOptions {
    octokit: Octokit;
    user: GetAuthenticatedUserResponseDataType;
}

export class GitHub {
    private octokit: Octokit;
    private user: GetAuthenticatedUserResponseDataType;

    public constructor(options: GitHubOptions) {
        this.octokit = options.octokit;
        this.user = options.user;
    }

    public async GetRepository(
        repo: string,
    ): Promise<GetRepositoryResponseDataType> {
        const response = await this.octokit.rest.repos.get({
            repo,
            owner: this.user.login,
        });
        return response.data;
    }

    public async CreateRepository(
        name: string,
    ): Promise<CreateRepositoryResponseDataType> {
        const response =
            await this.octokit.rest.repos.createForAuthenticatedUser({
                name,
                owner: this.user.login,
                auto_init: true,
                private: true,
            });
        return response.data;
    }

    public async GetOrCreateRepository(
        name: string,
    ): Promise<GetRepositoryResponseDataType> {
        try {
            return await this.GetRepository(name);
        } catch (e) {
            await this.CreateRepository(name);
            return await this.GetRepository(name);
        }
    }

    public async GetRateLimit(): Promise<GetRateLimitResponseDataType> {
        const response = await this.octokit.rest.rateLimit.get();
        return response.data;
    }

    public async GetFile(
        repo: string,
        path: string,
    ): Promise<GetContentResponseFileDateType> {
        const response = await this.octokit.rest.repos.getContent({
            owner: this.user.login,
            repo,
            path,
        });

        if ('content' in response.data) {
            return response.data;
        }

        throw new Error('Invalid file path');
    }

    public async UploadOrUpdateFile(
        params: UploadOrUpdateFileParameters,
    ): Promise<CreateOrUpdateFileContentsResponseDataType> {
        let sha = '';
        try {
            const file = await this.GetFile(params.repo, params.path);
            sha = file.sha;
        } catch (e) {
            if (e?.status !== 404) {
                throw e;
            }
        }

        const response =
            await this.octokit.rest.repos.createOrUpdateFileContents({
                owner: this.user.login,
                repo: params.repo,
                message:
                    params.message ||
                    `Autogenerated commit @ ${new Date().toISOString()}`,
                content: params.content.toString('base64'),
                path: params.path,
                sha,
            });

        return response.data;
    }

    // This is the old 'full' method to create a commit and push it to github kept
    // here incase I need to refer to it later (I am NOT writing this again!)
    // private async UploadFile(repo: string): Promise<void> {
    //     const commit = await this.octokit.rest.repos.getCommit({
    //         owner: this.user.login,
    //         repo,
    //         ref: 'main',
    //     });

    //     logger.info('commit', commit);

    //     const tree = await this.octokit.rest.git.getTree({
    //         owner: this.user.login,
    //         repo,
    //         tree_sha: commit.data.commit.tree.sha,
    //     });

    //     logger.info('tree', tree);

    //     if (!tree.data.tree.length) return Promise.reject();

    //     const blob = await this.octokit.rest.git.getBlob({
    //         owner: this.user.login,
    //         repo,
    //         file_sha: tree.data.tree[0].sha!,
    //     });

    //     logger.info('blob', blob);

    //     const newBlob = await this.octokit.rest.git.createBlob({
    //         owner: this.user.login,
    //         repo,
    //         content: Buffer.from('test').toString('base64'),
    //         encoding: 'base64',
    //     });

    //     logger.info('newBlob', newBlob);

    //     const newTree = await this.octokit.rest.git.createTree({
    //         owner: this.user.login,
    //         repo,
    //         base_tree: tree.data.sha,
    //         tree: [
    //             {
    //                 path: tree.data.tree[0].path,
    //                 sha: newBlob.data.sha,
    //                 mode: '100644',
    //             },
    //         ],
    //     });

    //     logger.info('newTree', newTree);

    //     const newCommit = await this.octokit.rest.git.createCommit({
    //         owner: this.user.login,
    //         repo,
    //         message: `Autogenerated commit @ ${new Date().toISOString()}`,
    //         parents: [commit.data.sha],
    //         tree: newTree.data.sha,
    //     });

    //     logger.info('newCommit', newCommit);

    //     const refs = await this.octokit.rest.git.listMatchingRefs({
    //         owner: this.user.login,
    //         repo,
    //         ref: '',
    //     });

    //     logger.info('refs', refs);

    //     const newRef = await this.octokit.rest.git.updateRef({
    //         owner: this.user.login,
    //         repo,
    //         ref: 'heads/main',
    //         sha: newCommit.data.sha,
    //     });

    //     logger.info('newRef', newRef);

    //     return Promise.resolve();
    // }
}
